import streamlit as st
from video_card import video_card
from card import card

# ================== PAGE: DATA SCIENCE ==================
def data_science_page():
    st.title("üìä Data Science ‚Äì L·ªô tr√¨nh to√†n di·ªán")
    st.info("T·ª´ thao t√°c d·ªØ li·ªáu c∆° b·∫£n ƒë·∫øn tr·ª±c quan h√≥a & storytelling")

    # ================== CH∆Ø∆†NG 1 ==================
    st.markdown("---")
    st.header("üìÇ Ch∆∞∆°ng 1: L√†m Quen V·ªõi D·ªØ Li·ªáu Th·ª±c")
    st.info("üéØ M·ª•c ti√™u: N·∫Øm ƒë·ªãnh d·∫°ng d·ªØ li·ªáu ph·ªï bi·∫øn, ƒë·ªçc/ghi v·ªõi Pandas, kh√°m ph√° s∆° b·ªô")

    with st.expander("Xem chi ti·∫øt: "):
            # B√†i h·ªçc
            col1, _, col2 = st.columns([8, 1, 8])
            with col1:
                card("B√†i 1: ƒê·ªãnh d·∫°ng d·ªØ li·ªáu ph·ªï bi·∫øn",
                     "C·∫•u tr√∫c vs b√°n c·∫•u tr√∫c vs phi c·∫•u tr√∫c. CSV, JSON, Excel, SQL, API‚Ä¶",
                     icon="üìë",
                     color = '#e8f5e9'
                     )
                card("B√†i 2: Pandas c∆° b·∫£n",
                     "Series vs DataFrame, t·∫°o DataFrame t·ª´ dict, ki·ªÉm tra .shape, .columns, .dtypes",
                     icon="üìë",
                     color = '#e8f5e9'
                     )
                card("B√†i 3: ƒê·ªçc d·ªØ li·ªáu",
                     "pd.read_csv(), pd.read_excel(), pd.read_json(). Th·ª±c h√†nh v·ªõi dataset th·∫≠t.",
                     icon="üìë",
                     color = '#e8f5e9'
                     )
                card("B√†i 4: Ghi d·ªØ li·ªáu ra file",
                     "Xu·∫•t d·ªØ li·ªáu sang CSV, Excel, JSON v·ªõi to_csv(), to_excel()",
                     icon="üìë",
                     color = '#e8f5e9'
                     )
            with col2:
                card("B√†i 5: Kh√°m ph√° d·ªØ li·ªáu",
                     ".info(), .describe(), √Ω nghƒ©a mean, std, min, max, count",
                     icon="üìë",
                     color = '#e8f5e9'
                     )
                card("B√†i 6: L√†m vi·ªác v·ªõi columns/index",
                     "Truy c·∫≠p, ƒë·ªïi t√™n c·ªôt, l·ªçc b·∫±ng .loc[], .iloc[]",
                     icon="üìë",
                     color = '#e8f5e9'
                     )
                card("B√†i 7: D·ªØ li·ªáu thi·∫øu",
                     "X·ª≠ l√Ω NaN v·ªõi .isnull(), .dropna(), .fillna()",
                     icon="üìë",
                     color = '#e8f5e9'
                     )
            card("Mini Project 1: COVID-19",
                     "ƒê·ªçc d·ªØ li·ªáu Our World In Data, ph√¢n t√≠ch s∆° b·ªô v√† l∆∞u b·∫£n r√∫t g·ªçn.",
                     icon="üìã",
                     color = 'linear-gradient(135deg, #fbc2eb, #a6c1ee)'
                     )

            card("Mini Project 2: D√¢n s·ªë & GDP",
                 "D·ªØ li·ªáu World Bank, l·ªçc 5 qu·ªëc gia GDP cao nh·∫•t, l∆∞u k·∫øt qu·∫£.",
                  icon="üìã",
                  color='linear-gradient(135deg, #fbc2eb, #a6c1ee)'
                 )

    # ================== CH∆Ø∆†NG 2 ==================
    st.markdown("---")
    st.header("üßπ Ch∆∞∆°ng 2: Data Cleaning")
    st.info("üéØ M·ª•c ti√™u: L√†m s·∫°ch d·ªØ li·ªáu thi·∫øu, tr√πng l·∫∑p, sai ƒë·ªãnh d·∫°ng, chu·∫©n h√≥a")

    # ================== CH∆Ø∆†NG 2: DATA CLEANING ==================
    with st.expander("Xem chi ti·∫øt:"):
        col1, _, col2 = st.columns([8, 1, 8])

        with col1:
            card("B√†i 1: Gi·ªõi thi·ªáu v·ªÅ Data Cleaning",
                 "T·∫ßm quan tr·ªçng trong pipeline Data Science. C√°c v·∫•n ƒë·ªÅ: Missing, Duplicate, Invalid, Inconsistent. C√¥ng c·ª•: pandas, numpy, regex.",
                 icon="üìë",
                 color='#e8f5e9'
                 )
            card("B√†i 2: Ph√°t hi·ªán d·ªØ li·ªáu thi·∫øu",
                 "D√πng .isnull(), .info(), .sum(). Tr·ª±c quan h√≥a v·ªõi missingno, seaborn. Ph√¢n lo·∫°i MCAR, MAR, MNAR.",
                 icon="üìë",
                 color='#e8f5e9'
                 )
            card("B√†i 3: Chi·∫øn l∆∞·ª£c x·ª≠ l√Ω Missing",
                 "X√≥a b·∫±ng .dropna(), ƒëi·ªÅn gi√° tr·ªã v·ªõi mean/median/mode, forward-fill, backward-fill, ho·∫∑c m√¥ h√¨nh (KNN/Regression).",
                 icon="üìë",
                 color='#e8f5e9'
                 )

        with col2:
            card("B√†i 4: D·ªØ li·ªáu tr√πng l·∫∑p",
                 "Ph√°t hi·ªán b·∫±ng .duplicated(), x·ª≠ l√Ω v·ªõi .drop_duplicates(), c√¢n nh·∫Øc theo m·ª•c ti√™u ph√¢n t√≠ch.",
                 icon="üìë",
                 color='#e8f5e9'
                 )
            card("B√†i 5: D·ªØ li·ªáu sai ƒë·ªãnh d·∫°ng & l·ªói logic",
                 "Ph√°t hi·ªán l·ªói b·∫±ng regex, str.contains(), apply(). V√≠ d·ª•: Email, s·ªë ƒëi·ªán tho·∫°i, tu·ªïi √¢m, ng√†y th√°ng sai.",
                 icon="üìë",
                 color='#e8f5e9'
                 )
            card("B√†i 6: Chu·∫©n h√≥a d·ªØ li·ªáu",
                 "Chu·∫©n h√≥a ch·ªØ (.str.lower(), .str.strip()), datetime (pd.to_datetime), ƒë·ªïi dtype, mapping d·ªØ li·ªáu kh√¥ng nh·∫•t qu√°n.",
                 icon="üìë",
                 color='#e8f5e9'
                 )

        # Mini Projects
        card("Mini Project 1: L√†m s·∫°ch d·ªØ li·ªáu kh√°ch h√†ng",
             "Dataset kh√°ch h√†ng: x·ª≠ l√Ω thi·∫øu tu·ªïi/email, x√≥a tr√πng, chu·∫©n h√≥a t√™n, gi·ªõi t√≠nh, sdt, validate email.",
             icon="üìã",
             color='linear-gradient(135deg, #fbc2eb, #a6c1ee)'
             )

        card("Mini Project 2: L√†m s·∫°ch d·ªØ li·ªáu giao d·ªãch",
             "Dataset ng√¢n h√†ng: l√†m s·∫°ch datetime, x·ª≠ l√Ω gi√° tr·ªã √¢m, ki·ªÉm tra tr√πng l·∫∑p, chu·∫©n h√≥a lo·∫°i giao d·ªãch.",
             icon="üìã",
             color='linear-gradient(135deg, #fbc2eb, #a6c1ee)'
             )

    # ================== CH∆Ø∆†NG 3 ==================
    st.markdown("---")
    st.header("üõ†Ô∏è Ch∆∞∆°ng 3: Feature Engineering")
    st.info(
        "üéØ M·ª•c ti√™u: Hi·ªÉu & √°p d·ª•ng c√°c k·ªπ thu·∫≠t Feature Engineering t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao ƒë·ªÉ t·ªëi ∆∞u ƒë·∫ßu v√†o m√¥ h√¨nh ML.")

    # ================== CH∆Ø∆†NG 3: FEATURE ENGINEERING ==================
    with st.expander("Xem chi ti·∫øt:"):
        col1, _, col2 = st.columns([8, 1, 8])

        with col1:
            card("B√†i 1: T·ªïng quan Feature Engineering",
                 "Feature Engineering trong pipeline ML. Ph√¢n lo·∫°i bi·∫øn: numerical, categorical, datetime, text, ordinal, binary. T·∫ßm quan tr·ªçng c·ªßa domain knowledge.",
                 icon="üìë",
                 color='#e8f5e9'
                 )
            card("B√†i 2: L√†m s·∫°ch & chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu",
                 "Chuy·ªÉn ƒë·ªïi ki·ªÉu v·ªõi .astype(). S·ª≠a l·ªói khi √©p ki·ªÉu. Category vs object. T·ª± ƒë·ªông profiling ki·ªÉu d·ªØ li·ªáu.",
                 icon="üìë",
                 color='#e8f5e9'
                 )
            card("B√†i 3: T·∫°o bi·∫øn m·ªõi (Feature Construction)",
                 "T·∫°o bi·∫øn to√°n h·ªçc, logic, t·ªïng h·ª£p. Feature t·ª´ datetime. K·ªπ thu·∫≠t n√¢ng cao: Interaction, Polynomial, Crossed Features.",
                 icon="üìë",
                 color='#e8f5e9'
                 )
            card("B√†i 4: Encoding d·ªØ li·ªáu ph√¢n lo·∫°i",
                 "C∆° b·∫£n: Label, One-hot. N√¢ng cao: Target, Binary, Frequency, CatBoost Encoding. ∆Øu/nh∆∞·ª£c ƒëi·ªÉm theo m√¥ h√¨nh.",
                 icon="üìë",
                 color='#e8f5e9'
                 )
            card("B√†i 5: Scaling & Transformation",
                 "C∆° b·∫£n: Min-Max, StandardScaler. N√¢ng cao: RobustScaler, Power Transform (Box-Cox, Yeo-Johnson), Log-transform.",
                 icon="üìë",
                 color='#e8f5e9'
                 )

        with col2:
            card("B√†i 6: Outlier ‚Äì Ph√°t hi·ªán & x·ª≠ l√Ω",
                 "Ph√°t hi·ªán b·∫±ng IQR, Z-score, Isolation Forest, LOF. Chi·∫øn l∆∞·ª£c: clipping, imputation, log, winsorizing. Ph√¢n bi·ªát k·ªπ thu·∫≠t vs th·ª±c t·∫ø.",
                 icon="üìë",
                 color='#e8f5e9'
                 )
            card("B√†i 7: Binning (Ph√¢n nh√≥m)",
                 "Fixed-width, Quantile bins. K·ªπ thu·∫≠t n√¢ng cao: K-means binning, Decision tree binning, Weight of Evidence.",
                 icon="üìë",
                 color='#e8f5e9'
                 )
            card("B√†i 8: X·ª≠ l√Ω d·ªØ li·ªáu th·ªùi gian",
                 "Tr√≠ch xu·∫•t feature t·ª´ timestamp (ng√†y, th√°ng, m√πa, gi·ªù). T√≠nh kho·∫£ng th·ªùi gian. Cyclical encoding v·ªõi sin/cos.",
                 icon="üìë",
                 color='#e8f5e9'
                 )
            card("B√†i 9: Feature Selection & Importance",
                 "Filter: Variance, Correlation. Wrapper: RFE. Embedded: Feature Importance, Lasso. Gi·∫£i th√≠ch v·ªõi SHAP, Permutation.",
                 icon="üìë",
                 color='#e8f5e9'
                 )

        # Project n√¢ng cao
        card("Project N√¢ng Cao: Feature Engineering To√†n T·∫≠p",
             "Dataset kh√°ch h√†ng m·ªü r·ªông: t·∫°o RFM t·ª´ giao d·ªãch, Target Encoding occupation, x·ª≠ l√Ω outlier v·ªõi IQR + RobustScaler, K-means binning thu nh·∫≠p, tr√≠ch xu·∫•t datetime, ph√¢n t√≠ch SHAP.",
             icon="üìã",
             color='linear-gradient(135deg, #fbc2eb, #a6c1ee)'
             )

    # ================== CH∆Ø∆†NG 4 ==================
    st.markdown("---")
    st.header("üìä Ch∆∞∆°ng 4: Th·ªëng K√™ M√¥ T·∫£ (Descriptive Statistics)")
    st.info(
        "üéØ M·ª•c ti√™u: Hi·ªÉu & √°p d·ª•ng c√°c k·ªπ thu·∫≠t th·ªëng k√™ m√¥ t·∫£ ƒë·ªÉ kh√°m ph√° d·ªØ li·ªáu, n·∫Øm b·∫Øt ƒë·∫∑c ƒëi·ªÉm c∆° b·∫£n v√† h·ªó tr·ª£ ph√¢n t√≠ch EDA."
    )

    # ================== CH∆Ø∆†NG 4: DESCRIPTIVE STATISTICS ==================
    with st.expander("Xem chi ti·∫øt:"):
        col1, _, col2 = st.columns([8, 1, 8])

        with col1:
            card(
                "B√†i 1: Gi·ªõi thi·ªáu Th·ªëng k√™ M√¥ t·∫£",
                "T·∫°i sao th·ªëng k√™ m√¥ t·∫£ l√† b∆∞·ªõc ƒë·∫ßu ti√™n? Vai tr√≤ trong EDA. Ph√¢n bi·ªát d·ªØ li·ªáu ƒë·ªãnh l∆∞·ª£ng vs ƒë·ªãnh t√≠nh.",
                icon="üìë",
                color="#e8f5e9"
            )
            card(
                "B√†i 2: Th·ªëng k√™ Trung t√¢m (Central Tendency)",
                "Mean, Median, Mode. N√¢ng cao: Trimmed Mean, Weighted Mean. So s√°nh khi d·ªØ li·ªáu l·ªách ho·∫∑c c√≥ outlier.",
                icon="üìë",
                color="#e8f5e9"
            )
            card(
                "B√†i 3: Ph∆∞∆°ng sai & ƒê·ªô l·ªách chu·∫©n",
                "√ù nghƒ©a variance & std. T√≠nh b·∫±ng pandas (.var(), .std()). N√¢ng cao: Coefficient of Variation, group std().",
                icon="üìë",
                color="#e8f5e9"
            )
            card(
                "B√†i 4: Ph√¢n ph·ªëi d·ªØ li·ªáu",
                "Histogram, density plot. Skewness (ƒë·ªô l·ªách), Kurtosis (ƒë·ªô nh·ªçn). N√¢ng cao: ki·ªÉm ƒë·ªãnh normality v·ªõi scipy.stats.",
                icon="üìë",
                color="#e8f5e9"
            )

        with col2:
            card(
                "B√†i 5: T·∫ßn su·∫•t & T·ª∑ l·ªá",
                "value_counts(), t√≠nh ph·∫ßn trƒÉm, b·∫£ng t·∫ßn su·∫•t. N√¢ng cao: Cross-tab (pd.crosstab), bar chart, pie chart.",
                icon="üìë",
                color="#e8f5e9"
            )
            card(
                "B√†i 6: T·ªïng h·ª£p theo nh√≥m",
                "groupby() c∆° b·∫£n: mean, count, std. pivot_table() ƒë·ªÉ t·ªïng h·ª£p linh ho·∫°t. N√¢ng cao: agg(), apply(), multi-index group.",
                icon="üìë",
                color="#e8f5e9"
            )
            card(
                "B√†i 7: Ph√¢n t√≠ch theo chi·ªÅu th·ªùi gian",
                "T·ªïng h·ª£p theo th√°ng/qu√Ω/nƒÉm. Rolling mean/std. N√¢ng cao: resample(), seasonal pattern v·ªõi line plot, heatmap.",
                icon="üìë",
                color="#e8f5e9"
            )

        # Project th·ª±c h√†nh
        card(
            "Project Th·ª±c H√†nh: Ph√¢n t√≠ch Kh√°ch H√†ng",
            "Dataset kh√°ch h√†ng: t√≠nh thu nh·∫≠p trung b√¨nh theo gender/occupation/age group, ph√¢n ph·ªëi thu nh·∫≠p + skewness, cross-tab ng√†nh ngh·ªÅ vs gi·ªõi t√≠nh, t·ªïng h·ª£p chi ti√™u theo th√°ng.",
            icon="üìã",
            color = 'linear-gradient(135deg, #fbc2eb, #a6c1ee)'
        )

    # ================== CH∆Ø∆†NG 5 ==================
    st.markdown("---")
    st.header("üìà Ch∆∞∆°ng 5: Tr·ª±c Quan H√≥a D·ªØ Li·ªáu")
    st.info(
        "üéØ M·ª•c ti√™u: Bi·∫øt ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì ph√π h·ª£p, l√†m ch·ªß Matplotlib & Seaborn, m·ªü r·ªông sang Plotly/Altair ƒë·ªÉ k·ªÉ chuy·ªán thuy·∫øt ph·ª•c b·∫±ng d·ªØ li·ªáu v√† x√¢y d·ª±ng dashboard."
    )

    # ================== CH∆Ø∆†NG 5: DATA VISUALIZATION ==================
    with st.expander("Xem chi ti·∫øt:"):
        col1, _, col2 = st.columns([8, 1, 8])

        with col1:
            card("B√†i 1: K·ªÉ chuy·ªán b·∫±ng bi·ªÉu ƒë·ªì (Data Storytelling)",
                 "Ch·ªçn bi·ªÉu ƒë·ªì theo m·ª•c ti√™u (ph√¢n ph·ªëi, xu h∆∞·ªõng, m·ªëi quan h·ªá, ph√¢n lo·∫°i). Hi·ªÉu c·∫•u tr√∫c 1 bi·ªÉu ƒë·ªì t·ªët. Tips: annotate, highlight, tr√°nh l·∫°m d·ª•ng m√†u.",
                 icon="üìë",
                 color="#e8f5e9"
                 )
            card("B√†i 2: Custom n√¢ng cao v·ªõi Matplotlib & Seaborn",
                 "T√πy ch·ªânh ticks, legend, subplot ph·ª©c t·∫°p. Th√™m annotation (trend line, v√πng c·∫£nh b√°o). Chuy√™n s√¢u: seaborn-whitegrid, Facet, basemap.",
                 icon="üìë",
                 color="#e8f5e9"
                 )
            card("B√†i 3: Tr·ª±c quan h√≥a m·ªëi quan h·ªá ƒëa bi·∫øn",
                 "Pairplot, Jointplot, Correlation Heatmap. M·ªëi quan h·ªá 3 bi·∫øn v·ªõi size, color, style. Pro: lmplot ƒëa l·ªõp, hexbin, density contour.",
                 icon="üìë",
                 color="#e8f5e9"
                 )

        with col2:
            card("B√†i 4: Visualization theo th·ªùi gian",
                 "Lineplot, rolling average, seasonality, multi-line, area chart. N√¢ng cao: event markers, resample() + tr·ª±c quan.",
                 icon="üìë",
                 color="#e8f5e9"
                 )
            card("B√†i 5: Tr·ª±c quan h√≥a ƒë·ªông (Interactive Visualization)",
                 "Plotly: px.line, px.scatter, px.bar v·ªõi hover tooltips. Altair: filter, selection, dashboard mini v·ªõi Streamlit. Pro: drill-down dashboard.",
                 icon="üìë",
                 color="#e8f5e9"
                 )
            card("B√†i 6: Visualization cho ph√¢n t√≠ch m√¥ h√¨nh",
                 "ROC, Precision-Recall, Feature Importance (bar, SHAP), Residual plots. ƒê√°nh gi√° tr·ª±c quan k·∫øt qu·∫£ m√¥ h√¨nh.",
                 icon="üìë",
                 color="#e8f5e9"
                 )

        # Case Study
        card("Case Study: Ph√¢n t√≠ch tr·ª±c quan to√†n di·ªán",
             "Dataset kh√°ch h√†ng & chi ti√™u theo th·ªùi gian: ph√¢n ph·ªëi thu nh·∫≠p (age, gender), heatmap t∆∞∆°ng quan, line chart chi ti√™u theo th√°ng, violin plot ngh·ªÅ nghi·ªáp, dashboard t∆∞∆°ng t√°c.",
             icon="üìã",
             color="linear-gradient(135deg, #fbc2eb, #a6c1ee)"
             )

    st.markdown("---")
    st.success("üëâ H·ªçc xong Data Science track, b·∫°n s·∫Ω th√†nh th·∫°o Numpy, Pandas, Seaborn, bi·∫øt x·ª≠ l√Ω & k·ªÉ chuy·ªán v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø.")